script_010_status = tryCatch({
  suppressMessages({
    library(tidyverse)
    library(lubridate)
    library(openxlsx)
    library(RDCOMClient)
  })


  setwd(
    "//hind.smartitbg.int/FileServer/Data Analyses/Analysis/1.Projects/112.WCard RO/2.Provisioning/03 Provisions Procedure"
  )
  
  # Run cession ####
  if (!file.exists(paste0("./Input Data/Sales/Cession_RO_", format(Sys.Date() - months(1), "%Y%m"), ".csv"))) {
    source(paste0(
      "\\\\hind.smartitbg.int\\FileServer\\Data Analyses\\Analysis\\1.Projects\\112.WCard RO\\",
      "2.Provisioning\\03 Provisions Procedure\\011_Process_Cession.R"
    ))
    
    if (inherits(cession_processing_status, "error")) stop(cession_processing_status$message)
  } else {
    message("Cession already processed")
  }
  
  setwd(
    "//hind.smartitbg.int/FileServer/Data Analyses/Analysis/1.Projects/112.WCard RO/2.Provisioning/03 Provisions Procedure"
  )

  
  # Set Parameters ####
  options(scipen = 999)
  ReportingDate <- as.character(floor_date(Sys.Date(), unit = "months"))
  StartDate <- "2017-01-01"
  StartDateForLegalPayments <- "2013-08-24" # "2013-08-24" is the min date
  
  
  # UDF ####
  source("./Functions/F_Elapsed_Months.R")
  source("./Functions/F_InterpolateRecoveryRates.R")
  
  is.true <- function(x) {
    !is.na(x) & x
  }
  
  readSales <- function(arg1) {
    f <- read.csv2(arg1, stringsAsFactors = F)
    f$Date <- substring(arg1, nchar(arg1) - 9, nchar(arg1) - 4)
    f$Date <- paste0(f$Date, "20")
    return(f)
  }
  
  read_sales <- function(arg1) {
    output <- read.csv2(arg1, stringsAsFactors = F)
    names(output) <- c("EasyClientNumber", "Outstanding", "SalesPrice", "Date")
    return(output)
  }
  
  Credit.Progress.Function <- function(arg1) {
    # Send query to dwh for each date.
    m <- substr(arg1, 1, 4)
    if (m == substr(ReportingDate, 1, 4)) {
      m <- "Current"
    }
    
    Query <-
      paste0("select
            FCP.OfferSK,
            FCP.CardSK,
            FCP.ClientSK,
            FCP.CurrentLimit,
            FCP.TotalDue,
            FCP.LastPayoffdate,
            FCP.LastWithdrawnDate,
            FCP.DateSK,
            FCP.CDate,
            FCP.DayDelay
            from dwh.FactCardProgress", m, " FCP
            inner join dwh.DimOffers DO on FCP.OfferSK = DO.OfferSK
            where FCP.DateSK = '", arg1, "';")
    
    output <- DBI::dbFetch(DBI::dbSendQuery(myc, Query)) %>%
      left_join(Moratorni, by = c("OfferSK" = "OfferSK")) %>%
      mutate(
        DefaultAtObservation = ifelse(
          FirstDefaultDate <= CDate & LastDefaultDate >= CDate, 1, 0
        ),
        # DefaultAtObservation = ifelse(FirstDefaultDate <= CDate, 1, 0),
        DefaultAtObservation = ifelse(is.na(DefaultAtObservation) == 1, 0, DefaultAtObservation),
        DefaultAfterCurrentDate = elapsed_months(FirstDefaultDate, CDate) + 1,
        DefaultAfterCurrentDate = ifelse(DefaultAfterCurrentDate > 12, -999, DefaultAfterCurrentDate),
        DefaultAfterCurrentDate = ifelse(DefaultAtObservation == 1, 1, DefaultAfterCurrentDate),
        DefaultAfterCurrentDate = ifelse(LastDefaultDate < CDate, -999, DefaultAfterCurrentDate),
        DefaultAfterCurrentDate = ifelse(is.na(DefaultAfterCurrentDate) == 1, -999, DefaultAfterCurrentDate),
        LastPayoffdate = ymd(LastPayoffdate),
        DaysSinceLastPmt = difftime(CDate, LastPayoffdate, units = 'days') - 1,
        # DaysSinceLastPmt = ifelse(is.na(DaysSinceLastPmt) == 1, -999, DaysSinceLastPmt),
        DaysSinceLastPmt = ifelse(
          is.na(DaysSinceLastPmt) == 1,
          difftime(CDate, FirstDefaultDate, units = 'days') - 1,
          DaysSinceLastPmt
        ),
        DaysSinceLastPmt = ifelse(
          FirstDefaultDate > LastPayoffdate | is.na(LastPayoffdate) == 1,
          difftime(CDate, FirstDefaultDate, units = 'days') - 1, DaysSinceLastPmt),
        
        ImpairmentsBucket = case_when(
          DefaultAtObservation == 0 & DayDelay == 0 ~ "0 DPD",
          DefaultAtObservation == 0 & DayDelay > 0 ~ "1+ DPD",
          DefaultAtObservation == 1 & DayDelay == -999 ~ "Never paid",
          DefaultAtObservation == 1 & DayDelay <= 90 ~ "M: [0;90]",
          
          # DefaultAtObservation == 1 & DayDelay <= 180 ~ "M: [91;180]",
          DefaultAtObservation == 1 & DayDelay <= 120 ~ "M: [91;120]",
          DefaultAtObservation == 1 & DayDelay <= 150 ~ "M: [121;150]",
          DefaultAtObservation == 1 & DayDelay <= 180 ~ "M: [151;180]",

          DefaultAtObservation == 1 & DayDelay > 180 ~ "M: >= 181",
          TRUE ~ "Error"
        ),
        # ImpairmentsBucket2 = case_when(
        #   DefaultAtObservation == 0 & DayDelay == 0 ~ "0 DPD",
        #   DefaultAtObservation == 0 & DayDelay > 0 ~ "1+ DPD",
        #   DefaultAtObservation == 1 & DaysSinceLastPmt == -999 ~ "Never paid",
        #   DefaultAtObservation == 1 & DaysSinceLastPmt <= 90 ~ "M: [0;30]",
        #   DefaultAtObservation == 1 & DaysSinceLastPmt <= 60 ~ "M: [31;60]",
        #   DefaultAtObservation == 1 & DaysSinceLastPmt <= 90 ~ "M: [61;90]",
        #   DefaultAtObservation == 1 & DaysSinceLastPmt <= 180 ~ "M: [91;180]",
        #   DefaultAtObservation == 1 & DaysSinceLastPmt > 180 ~ "M: >= 181",
        #   TRUE ~ "Error"
        # ),
        TotalDue = ifelse(TotalDue < 0, 0, TotalDue)
      )
    return(output)
  }
  
  Impairments.Buckets.Allocation.Function <- function(arg1) {
    output <- CreditProgressList[[as.character(arg1)]] %>%
      group_by(ImpairmentsBucket) %>%
      summarise(
        TotalDue = sum(TotalDue),
        Observations = n(),
        .groups = 'drop'
      )
    
    return(output)
  }
  
  
  Bad.Rates.Function <- function(arg1) {
    empty <- as.data.frame(matrix(NA, nrow = 13 * 2, ncol = 2))
    names(empty) <- c("ImpairmentsBucket", "DefaultAfterCurrentDate")
    empty$ImpairmentsBucket <- c(rep("0 DPD", 13), rep("1+ DPD", 13))
    empty$DefaultAfterCurrentDate <- c(rep(c(-999, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 2))
    
    maxMonth <- elapsed_months(as.Date(ReportingDate), as.Date(arg1)) + 1
    
    output <- CreditProgressList[[as.character(arg1)]] %>%
      filter(ImpairmentsBucket %in% c("0 DPD", "1+ DPD")) %>%
      left_join(
        CreditProgressList[[as.character(arg1)]] %>%
          group_by(ImpairmentsBucket) %>%
          summarise(
            TotalDue1 = sum(TotalDue),
            Obs1 = n(),
            .groups = 'drop'
          ),
        by = c("ImpairmentsBucket")
      ) %>%
      group_by(ImpairmentsBucket, DefaultAfterCurrentDate) %>%
      summarise(
        Observations = n(),
        Obs1 = mean(Obs1),
        .groups = 'drop'
      ) %>%
      group_by(ImpairmentsBucket) %>%
      mutate(
        CumObs = cumsum(Observations),
        HelpDefaultRate = Observations / Obs1,
        DefaultRate = cumsum(
          c(ifelse(DefaultAfterCurrentDate[1] == -999, 0, 1),
            rep(1, length(DefaultAfterCurrentDate[-1]))) * HelpDefaultRate)
      ) %>%
      ungroup() %>%
      arrange(ImpairmentsBucket, DefaultAfterCurrentDate) %>%
      select(-Obs1, -HelpDefaultRate)
    
    
    
    output <- left_join(empty, output, by = c("ImpairmentsBucket", "DefaultAfterCurrentDate")) %>%
      mutate(Observations = ifelse(is.na(Observations) == 1, 0, Observations)) %>%
      group_by(ImpairmentsBucket) %>%
      mutate(
        Obs1 = sum(Observations),
        CumObs = cumsum(Observations),
        HelpDefaultRate = Observations / Obs1,
        DefaultRate = cumsum(c(
          ifelse(DefaultAfterCurrentDate[1] == -999, 0, 1),
          rep(1, length(DefaultAfterCurrentDate[-1]))
        ) * HelpDefaultRate),
        Observations = ifelse(row_number() > maxMonth, NA, Observations),
        CumObs = ifelse(row_number() > maxMonth, NA, CumObs),
        DefaultRate = ifelse(row_number() > maxMonth, NA, DefaultRate),
        DefaultAfterCurrentDate = ifelse(DefaultAfterCurrentDate == -999, NA, DefaultAfterCurrentDate),
        DefaultRate = DefaultRate * 100,
        ObservationDate = as.Date(as.character(arg1))
      ) %>%
      ungroup() %>%
      select(-Obs1, -HelpDefaultRate) %>%
      dplyr::rename(DefaultAfter = DefaultAfterCurrentDate)

    return(output)
  }
  
  
  Recovery.Rates.Function <- function(arg1) {
    buckets <- c("M: [0;90]", "M: [91;120]", "M: [121;150]", "M: [151;180]", "M: >= 181")
    months_after <- 1:12
    
    empty <- as.data.frame(matrix(NA, nrow = length(months_after) * length(buckets), ncol = 2))
    names(empty) <- c("MonthsAfter", "ImpairmentsBucket")
    
    empty$ImpairmentsBucket <- rep(buckets, length(months_after))
    empty$ImpairmentsBucket <- empty$ImpairmentsBucket[order(empty$ImpairmentsBucket)]
    empty$MonthsAfter <- c(rep(months_after, length(buckets)))
    
    maxMonth <- elapsed_months(as.Date(ReportingDate), as.Date(arg1))
    
    output <- CreditProgressList[[as.character(arg1)]] %>%
      filter(
        ImpairmentsBucket %in% buckets,
        TotalDue > 0
      ) %>%
      group_by(ImpairmentsBucket) %>%
      mutate(TotalMoneys = sum(TotalDue)) %>%
      ungroup() %>%
      left_join(Payments, by = c("OfferSK" = "OfferSK")) %>%
      filter(ymd(Date) >= ymd(CDate)) %>%
      arrange(OfferSK, Date) %>%
      group_by(OfferSK) %>%
      mutate(
        CumulativeAmount = cumsum(Amount),
        Row_num = row_number()
      ) %>%
      ungroup() %>%
      mutate(
        MonthsAfter = elapsed_months(ymd(Date), ymd(CDate)) + 1,
        MonthsAfter = ifelse(is.na(MonthsAfter) == 1, 1, MonthsAfter),
        Amount = ifelse(is.na(Amount) == 1, 0, Amount),
        CumulativeAmount = if_else(is.na(CumulativeAmount) == 1, 0, CumulativeAmount),
        CumAmount1 = if_else(CumulativeAmount > TotalDue, TotalDue, CumulativeAmount),
        Amount = ifelse(
          CumAmount1 == TotalDue,
          ifelse(Row_num == 1, TotalDue,
                 ifelse(lag(CumAmount1) == TotalDue, 0, TotalDue - lag(CumAmount1))), Amount)
      ) %>%
      group_by(MonthsAfter, ImpairmentsBucket) %>%
      summarise(
        TotalMoneys = mean(TotalMoneys),
        Paid = sum(Amount),
        .groups = 'drop'
      ) %>%
      group_by(ImpairmentsBucket) %>%
      mutate(
        CumPaid = cumsum(Paid),
        PaidPerc = CumPaid / TotalMoneys
      ) %>%
      ungroup() %>%
      arrange(ImpairmentsBucket, MonthsAfter)
    
    output <- left_join(empty, output, by = c("ImpairmentsBucket", "MonthsAfter")) %>%
      mutate(Paid = ifelse(is.na(Paid) == 1, 0, Paid)) %>%
      group_by(ImpairmentsBucket) %>%
      mutate(
        TotalMoneys = max(TotalMoneys, na.rm = TRUE),
        TotalMoneys = ifelse(is.infinite(TotalMoneys), 0, TotalMoneys),
        CumPaid = cumsum(Paid),
        PaidPerc = CumPaid / TotalMoneys,
        PaidPerc = ifelse(is.nan(PaidPerc), 0, PaidPerc),
        PaidPerc = ifelse(row_number() > maxMonth, NA, PaidPerc)
      ) %>%
      ungroup() %>%
      select(MonthsAfter, ImpairmentsBucket, PaidPerc) %>%
      mutate(
        PaidPerc = PaidPerc * 100,
        ObservationDate = as.Date(as.character(arg1))
      )
    
    output$MonthsAfter <- c(rep(months_after, length(buckets)))
    
    
    output <- output %>%
      spread(key = MonthsAfter, value = PaidPerc)
    
    return(output)
  }
  
  #- Archive
  # 
  # Recovery.Rates.Function2 <- function(arg1) {
  #   output <- RecoveryRatesList[[as.character(arg1)]] %>%
  #     spread(key = MonthsAfter, value = PaidPerc)
  #   
  #   print(arg1)
  #   return(output)
  # }
  #-
  
  
  
  # Load data ####
  ## MappingO OfferSK = EasyClientNumber ####
  myc <- DBI::dbConnect(
    odbc::odbc(),
    driver = "SQL Server",
    server = "scorpio.smartitbg.int",
    database = "BIsmartWCRO"
  )
  
  Query <- paste0("
SELECT
    EasyClientNumber,
    min(OfferSK) AS OfferSK
FROM
    dwh.DimCards
GROUP BY
    EasyClientNumber;")
  
  message('Loading mapping')
  Query <- DBI::dbSendQuery(myc, Query)
  Mapping <- DBI::dbFetch(Query)
  DBI::dbClearResult(Query)
  
  
  ## Dates ####
  Query <- paste0("
SELECT
    max(DateSk) AS LastDateSK,
    max(Date) AS LastDate,
    min(DateSk) AS FirstDateSK,
    min(Date) AS FirstDate
FROM
    dwh.dimdate
GROUP BY
    Year,
    MONTH
ORDER BY
    LastDateSK")
  
  message('Loading dates')
  Query <- DBI::dbSendQuery(myc, Query)
  Dates <- DBI::dbFetch(Query) %>%
    filter(FirstDate >= StartDate, FirstDate <= ReportingDate)
  DBI::dbClearResult(Query)
  
  
  ## Payments received ####
  Query <- paste0("
SELECT
    FEE.OfferSK,
    FEE.DocumentDate,
    FEE.Amount,
    DFO.DID,
    DFO.[Name]
FROM
    dwh.FactExtraExpenses FEE
    LEFT JOIN (
        SELECT
            FinOperationSK,
            DID,
            [Name]
        FROM
            dwh.DimFinOperation
    ) DFO ON FEE.FinOperationSK = DFO.FinOperationSK -- Filter by date here
    -- WHERE DocumentDate >= '2018-01-01'
WHERE
    DocumentDate <= '", ReportingDate, "'
    AND DID = 99;")
  
  message('Loading extra expenses')
  Query <- DBI::dbSendQuery(myc, Query)
  Payments99 <- DBI::dbFetch(Query)
  DBI::dbClearResult(Query)
  
  # Get Last Payment Date
  LastPaymentDate <- Payments99 %>%
    mutate(
      DocumentDate = ymd(DocumentDate),
      DocumentDate = as.numeric(DocumentDate)
    ) %>%
    group_by(OfferSK) %>%
    summarise(LastPmtDate = max(DocumentDate, na.rm = TRUE)) %>%
    ungroup() %>%
    mutate(LastPmtDate = as.Date(LastPmtDate, origin = "1970-01-01"))

  
  ## DILPs ####
  Query <- paste0("
SELECT
    FEE.OfferSK,
    FEE.DocumentDate,
    FEE.Amount,
    DFO.DID,
    DFO.[Name]
FROM
    dwh.FactExtraExpenses FEE
    LEFT JOIN (
        SELECT
            FinOperationSK,
            DID,
            [Name]
        FROM
            dwh.DimFinOperation
    ) DFO ON FEE.FinOperationSK = DFO.FinOperationSK -- Filter by date here
WHERE
    DocumentDate >= '", StartDateForLegalPayments, "'
    AND DocumentDate <= '", ReportingDate, "'
    AND DID = 800;")
  
  Query <- DBI::dbSendQuery(myc, Query)
  Payments800 <- DBI::dbFetch(Query)
  DBI::dbClearResult(Query)
  
  
  Moratorni <- Payments800 %>%
    mutate(
      DocumentDate = ymd(DocumentDate),
      DocumentDate = as.numeric(DocumentDate)
    ) %>%
    group_by(OfferSK) %>%
    summarize(
      FirstDefaultDate = min(DocumentDate, na.rm = TRUE),
      LastDefaultDate = max(DocumentDate, na.rm = TRUE)
    ) %>%
    ungroup() %>%
    mutate(
      FirstDefaultDate = as.Date(FirstDefaultDate, origin = "1970-01-01"),
      LastDefaultDate = as.Date(LastDefaultDate, origin = "1970-01-01")
    )
  
  
  ## Sales ####
  message('Loading sales')
  SalesFiles <- list.files("Input Data\\Sales", pattern = "csv", full.names = TRUE)
  
  
  Sales <- do.call(bind_rows, lapply(SalesFiles, read_sales)) %>%
    mutate(
      Date = dmy(Date),
      Outstanding = as.numeric(gsub("[[:space:]]", "", Outstanding)),
      SalesPrice = as.numeric(gsub("[[:space:]]", "", SalesPrice))
    ) %>%
    left_join(Mapping, by = c("EasyClientNumber" = "EasyClientNumber"))
  
  Sales$FirstDefaultDate <- NA
  
  Sales <- Sales[, c("OfferSK", "Date", "FirstDefaultDate", "SalesPrice")] %>%
    mutate(SalesPrice = round(SalesPrice, 1))
  
  names(Sales) <- c("OfferSK", "Date", "FirstDefaultDate", "Amount")
  
  Sales <- Sales %>%
    mutate(
      Date = as.numeric(Date),
      SalesFlag = "Sale"
    )
  
  
  ## Payments combined ####
  message('Processing payments')
  Payments <- Payments99 %>%
    left_join(Moratorni, by = c("OfferSK" = "OfferSK")) %>%
    filter(is.true(FirstDefaultDate < DocumentDate)) %>%
    mutate(
      Date = ymd(paste0(substr(as.character(DocumentDate), 1, 7), "-20")),
      Date = as.numeric(Date)
    ) %>%
    group_by(OfferSK, Date, FirstDefaultDate) %>%
    summarize(Amount = sum(Amount), .groups = 'drop') %>%
    mutate(SalesFlag = "Payment")
  
  if (isTRUE(include_cession)) {
    Payments <- Payments %>% 
      bind_rows(Sales)
  }
  
  Payments <- Payments %>% 
    arrange(OfferSK, Date) %>%
    group_by(OfferSK) %>%
    mutate(
      FirstDefaultDate = FirstDefaultDate[1],
      CumulativeAmount = cumsum(Amount)
    ) %>%
    ungroup() %>%
    mutate(Date = as.Date(Date, origin = "1970-01-01"))
  
  
  # Get portfolio ####
  message('Processing card progress')
  Loop.List <- Dates$FirstDateSK[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]
  
  
  CreditProgressList <- lapply(Loop.List, Credit.Progress.Function)
  
  names(CreditProgressList) <-
    sort(unique(Dates$FirstDate[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]))
  
  
  Loop.List <- Dates$FirstDate[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]
  ImpairmentsBucketsAllocationList <- lapply(Loop.List, Impairments.Buckets.Allocation.Function)
  
  
  names(ImpairmentsBucketsAllocationList) <- sort(unique(
    Dates$FirstDate[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]
  ))
  
  
  ## Bad Rates ####
  Loop.List <- Dates$FirstDate[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]
  
  BadRatesList <- lapply(Loop.List, Bad.Rates.Function)
  names(BadRatesList) <- sort(unique(Dates$FirstDate[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]))
  
  
  ## Recovery rates ####
  Loop.List <- Dates$FirstDate[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]
  Loop.List <- Loop.List[-length(Loop.List)]
  
  RecoveryRatesList <- lapply(Loop.List, Recovery.Rates.Function)
  names_list <- sort(unique(Dates$FirstDate[Dates$FirstDate >= StartDate & Dates$FirstDate <= ReportingDate]))
  names_list <- names_list[-length(names_list)]
  names(RecoveryRatesList) <- names_list
  
  RecoveryMatrix <- do.call(bind_rows, RecoveryRatesList) %>% # RecoveryRatesMatrixList
    filter(ObservationDate < as.Date(ReportingDate))
  
  
  # Create new report ####
  message('Creating new report')
  provision_files = list.files("./Final Results and Documentation/", full.names = TRUE)
  
  last_provision_file = provision_files[
    grepl(
      pattern = paste0(
        format(floor_date(Sys.Date() - months(1), 'months'), "%d.%m.%Y"),
        ifelse(isTRUE(include_cession), ".*With", ".*No"),
        "Sales"
      ),
      provision_files
    )
  ]
  
  
  if (length(last_provision_file) == 0) stop("Provision file from last month not found")
  wb = loadWorkbook(last_provision_file)
  
  
  ## Portfolio ####
  try(
    renameWorksheet(
      wb = wb,
      sheet = 1,
      newName = paste(
        "Portfolio",
        ReportingDate
      )
    ),
    silent = T
  )
  
  # Make sure all possible buckets are present
  all_buckets_df = data.frame(
    ImpairmentsBucket = c("0 DPD", "1+ DPD", "M: [0;90]", "M: [91;120]", "M: [121;150]", "M: [151;180]", "M: >= 181"),
    TotalDue = rep(0, 7),
    Observations = rep(0, 7)
  )
  
  if (nrow(ImpairmentsBucketsAllocationList[[ReportingDate]]) < 7) {
    ImpairmentsBucketsAllocationList[[ReportingDate]] = bind_rows(
      all_buckets_df %>%
        filter(!ImpairmentsBucket %in% ImpairmentsBucketsAllocationList[[ReportingDate]]$ImpairmentsBucket),
      ImpairmentsBucketsAllocationList[[ReportingDate]]
    )
  }
  
  
  portfolio_table <- ImpairmentsBucketsAllocationList[[ReportingDate]] %>%
    mutate(order = case_when(
      ImpairmentsBucket == "0 DPD" ~ 1,
      ImpairmentsBucket == "1+ DPD" ~ 2,
      ImpairmentsBucket == "M: [0;90]" ~ 3,
      ImpairmentsBucket == "M: [91;120]" ~ 4,
      ImpairmentsBucket == "M: [121;150]" ~ 5,
      ImpairmentsBucket == "M: [151;180]" ~ 6,
      ImpairmentsBucket == "M: >= 181" ~ 7,
    )) %>% 
    arrange(order) %>% 
    select(-order)
  
  writeData(
    wb = wb,
    sheet = 1,
    x = portfolio_table,
    startCol = 2,
    startRow = 3,
    colNames = FALSE
  )
  
  
  ## PD Calculation ####
  writeData(
    wb = wb,
    sheet = 2,
    x = BadRatesList[[as.character(as.Date(ReportingDate) - months(12))]] %>% 
      mutate(ObservationDate = format(ObservationDate, "%d.%m.%Y")),
    startCol = 3,
    startRow = 3,
    colNames = FALSE
  )
  
  writeData(
    wb = wb,
    sheet = 2,
    x = BadRatesList[[as.character(as.Date(ReportingDate) - months(13))]] %>% 
      mutate(ObservationDate = format(ObservationDate, "%d.%m.%Y")),
    startCol = 11,
    startRow = 3,
    colNames = FALSE
  )
  
  writeData(
    wb = wb,
    sheet = 2,
    x = BadRatesList[[as.character(as.Date(ReportingDate) - months(14))]] %>% 
      mutate(ObservationDate = format(ObservationDate, "%d.%m.%Y")),
    startCol = 19,
    startRow = 3,
    colNames = FALSE
  )
  
  # Dates
  writeData(
    wb = wb,
    sheet = 2,
    x = format(as.Date(ReportingDate) - months(12), "%d.%m.%Y"),
    startCol = 2,
    startRow = 2,
    colNames = FALSE
  )
  
  writeData(
    wb = wb,
    sheet = 2,
    x = format(as.Date(ReportingDate) - months(13), "%d.%m.%Y"),
    startCol = 10,
    startRow = 2,
    colNames = FALSE
  )
  
  writeData(
    wb = wb,
    sheet = 2,
    x = format(as.Date(ReportingDate) - months(14), "%d.%m.%Y"),
    startCol = 18,
    startRow = 2,
    colNames = FALSE
  )
  
  
  ## Recovery rates ####
  recoveries_first_row <- 2
  
  writeData(
    wb = wb,
    sheet = 3,
    x = InterpolateRecoveryRates(
      RecoveryMatrix %>%
        filter(ImpairmentsBucket == "M: [0;90]"  & ObservationDate >= as.character(as.Date(ReportingDate) - months(20)))
    )[[1]],
    startCol = 2,
    startRow = recoveries_first_row,
    colNames = FALSE
  )
  
  # NOTE: before these three were in one group
  writeData(
    wb = wb,
    sheet = 3,
    x = InterpolateRecoveryRates(
      RecoveryMatrix %>%
        filter(ImpairmentsBucket == "M: [91;120]"  & ObservationDate >= as.character(as.Date(ReportingDate) - months(20)))
    )[[1]],
    startCol = 2,
    startRow = recoveries_first_row + 24,
    colNames = FALSE
  )
  
  writeData(
    wb = wb,
    sheet = 3,
    x = InterpolateRecoveryRates(
      RecoveryMatrix %>%
        filter(ImpairmentsBucket == "M: [121;150]"  & ObservationDate >= as.character(as.Date(ReportingDate) - months(20)))
    )[[1]],
    startCol = 2,
    startRow = recoveries_first_row + 24 * 2,
    colNames = FALSE
  )
  
  writeData(
    wb = wb,
    sheet = 3,
    x = InterpolateRecoveryRates(
      RecoveryMatrix %>%
        filter(ImpairmentsBucket == "M: [151;180]"  & ObservationDate >= as.character(as.Date(ReportingDate) - months(20)))
    )[[1]],
    startCol = 2,
    startRow = recoveries_first_row + 24 * 3,
    colNames = FALSE
  )
  
  
  # writeData(
  #   wb = wb,
  #   sheet = 3,
  #   x = InterpolateRecoveryRates(
  #     RecoveryMatrix %>%
  #       filter(ImpairmentsBucket == "M: [91;180]"  & ObservationDate >= as.character(as.Date(ReportingDate) - months(20)))
  #   )[[1]],
  #   startCol = 2,
  #   startRow = 26,
  #   colNames = FALSE
  # )
  
  writeData(
    wb = wb,
    sheet = 3,
    x = InterpolateRecoveryRates(
      RecoveryMatrix %>%
        filter(ImpairmentsBucket == "M: >= 181"  & ObservationDate >= as.character(as.Date(ReportingDate) - months(20)))
    )[[1]],
    startCol = 2,
    startRow = recoveries_first_row + 24 * 4,
    colNames = FALSE
  )
  
  new_provision_file <- paste0(
    "./Final Results and Documentation/Final WC RO Provisions ",
    format(as.Date(ReportingDate), "%d.%m.%Y"),
    " - DayDelay -", ifelse(isTRUE(include_cession), "With", "No"), "Sales.xlsx"
  )
  
  saveWorkbook(
    wb,
    file = new_provision_file,
    overwrite = T
  )
  
  # Open reports from previous and current months
  # system(paste0('open "', last_provision_file, '"'))
  # system(paste0('open "', new_provision_file, '"'))
  
  # Copy new report to /Reports
  reports_dir <- paste0("//hind.smartitbg.int/FileServer/Data Analyses/Analysis/10. Reports/", format(Sys.Date(), "%Y_%m"))
  
  if (!dir.exists(reports_dir)) {
    dir.create(reports_dir)
    message("Created new dir in reports:", reports_dir)
  }
  
  saveWorkbook(
    wb,
    file = paste0(
      reports_dir,
      "/",
      gsub("./Final Results and Documentation/", "", new_provision_file)
    ),
    overwrite = T
  )
  
  
  # Save some backup files ####
  BadRatesList_to_excel <- list(
    BadRatesList[[as.character(as.Date(ReportingDate) - months(12))]],
    BadRatesList[[as.character(as.Date(ReportingDate) - months(13))]],
    BadRatesList[[as.character(as.Date(ReportingDate) - months(14))]]
  )
  names(BadRatesList_to_excel) <- c(
    as.character(as.Date(ReportingDate) - months(12)),
    as.character(as.Date(ReportingDate) - months(13)),
    as.character(as.Date(ReportingDate) - months(14))
  )
  writexl::write_xlsx(
    ImpairmentsBucketsAllocationList[[ReportingDate]],
    paste0("Output Data\\BucketsAllocationList-", ReportingDate, ".xlsx")
  )
  writexl::write_xlsx(BadRatesList_to_excel, paste0("Output Data\\BadRates-", ReportingDate, ".xlsx"))
  writexl::write_xlsx(RecoveryMatrix, paste0("Output Data\\Recoveries-", ReportingDate, ".xlsx"))
  saveRDS(CreditProgressList[[ReportingDate]], paste0("Output Data\\MatrixData-", ReportingDate, ".rds"))
  
  # Account level ####
  # Extract impairments on account level as of 12.31.2020
  PD <- bind_rows(BadRatesList_to_excel) %>%
    filter(DefaultAfter == 12) %>%
    group_by(ImpairmentsBucket) %>%
    summarise(PD = mean(DefaultRate) / 100)
  
  Recovery <- data.frame()
  for (category in unique(RecoveryMatrix$ImpairmentsBucket)) {
    tmp <- InterpolateRecoveryRates(
      RecoveryMatrix %>%
        filter(ImpairmentsBucket == category & ObservationDate >= as.character(as.Date(ReportingDate) - months(20)))
    )[[1]] %>%
      filter(
        ObservationDate >= as.character(as.Date(ReportingDate) - months(11)) &
          ObservationDate <= as.character(as.Date(ReportingDate) - months(6))
      ) %>%
      group_by(ImpairmentsBucket) %>%
      summarise(RecoveryRate = mean(`12`) / 100)
    
    Recovery[nrow(Recovery) + 1, c("ImpairmentsBucket", "RecoveryRate")] <- tmp
  }
  
  # Fill recovery rate in buckets '0 DPD', '1+ DPD' - same as 'M: [0;90]'
  Recovery = bind_rows(
    data.frame(
      ImpairmentsBucket = c('0 DPD', '1+ DPD'),
      RecoveryRate = Recovery %>% filter(ImpairmentsBucket == 'M: [0;90]') %>% pull(RecoveryRate) %>% as.numeric()
    ),
    Recovery
  )
  
  Last_CP <- CreditProgressList[[ReportingDate]] %>%
    left_join(PD, by = "ImpairmentsBucket") %>%
    left_join(Recovery, by = "ImpairmentsBucket") %>%
    mutate(
      TotalDue = ifelse(TotalDue <= 0, 0, TotalDue),
      PD = ifelse(is.na(PD), 1, PD),
      Provisioning_Coefficient = PD * (1 - RecoveryRate),
      Provision = TotalDue * Provisioning_Coefficient
    )
  
  writexl::write_xlsx(Last_CP, paste0("./Output Data/Axi_RO_Provisions_Account_Level_", ReportingDate, ".xlsx"))
  
}, error = function(e) {
  message(e)
  return(e)
})
